diff --git a/BUILD.gn b/BUILD.gn
index bca5b5356b..6e24a30cd3 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -585,9 +585,7 @@ config("internal_config") {
     ":cppgc_header_features",
   ]
 
-  if (is_component_build) {
-    defines += [ "BUILDING_V8_SHARED" ]
-  }
+  defines += [ "BUILDING_V8_SHARED" ]
 
   if (v8_current_cpu == "riscv64") {
     libs = [ "atomic" ]
@@ -4956,7 +4954,7 @@ v8_source_set("torque_ls_base") {
   }
 }
 
-v8_component("v8_libbase") {
+v8_source_set("v8_libbase") {
   sources = [
     "src/base/address-region.h",
     "src/base/atomic-utils.h",
@@ -5071,11 +5069,7 @@ v8_component("v8_libbase") {
 
   data_deps = []
 
-  defines = []
-
-  if (is_component_build) {
-    defines = [ "BUILDING_V8_BASE_SHARED" ]
-  }
+  defines = [ "BUILDING_V8_BASE_SHARED" ]
 
   if (is_posix || is_fuchsia) {
     sources += [
@@ -5194,7 +5188,7 @@ v8_component("v8_libbase") {
   # TODO(jochen): Add support for qnx, freebsd, openbsd, netbsd, and solaris.
 }
 
-v8_component("v8_libplatform") {
+v8_source_set("v8_libplatform") {
   sources = [
     "//base/trace_event/common/trace_event_common.h",
     "include/libplatform/libplatform-export.h",
@@ -5225,9 +5219,7 @@ v8_component("v8_libplatform") {
 
   configs = [ ":internal_config_base" ]
 
-  if (is_component_build) {
-    defines = [ "BUILDING_V8_PLATFORM_SHARED" ]
-  }
+  defines = [ "BUILDING_V8_PLATFORM_SHARED" ]
 
   public_configs = [ ":libplatform_config" ]
 
@@ -5637,6 +5629,23 @@ if (v8_enable_webassembly) {
   }
 }
 
+v8_loadable_module("libv8android") {
+  defines = [ "BUILDING_V8_SHARED" ]
+
+  sources = [
+    "src/utils/v8dll-main.cc",
+  ]
+
+  deps = [
+    ":v8",
+    ":v8_libbase",
+    ":v8_libplatform",
+    ":v8_snapshot",
+  ]
+
+  configs = [ ":internal_config" ]
+}
+
 ###############################################################################
 # Executables
 #
diff --git a/gni/v8.gni b/gni/v8.gni
index fe445307f9..b07fb80222 100644
--- a/gni/v8.gni
+++ b/gni/v8.gni
@@ -303,3 +303,12 @@ template("v8_static_library") {
     configs += invoker.configs
   }
 }
+
+template("v8_loadable_module") {
+  loadable_module(target_name) {
+    forward_variables_from(invoker, "*", [ "configs" ])
+    configs -= v8_remove_configs
+    configs += v8_add_configs
+    configs += invoker.configs
+  }
+}
